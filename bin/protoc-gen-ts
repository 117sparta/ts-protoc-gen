#!/usr/bin/env node
/**
 * This is the ProtoC compiler plugin. 
 *
 * It only accepts stdin/stdout output according to the protocol
 * specified in [plugin.proto](https://github.com/google/protobuf/blob/master/src/google/protobuf/compiler/plugin.proto).
 */
const getStdin = require('get-stdin');
const generator = require('../src/generator/generator.js');


// This has a weird side-effect of registering types as `proto.*`
var plugin_pb = require("../protodefs/google/protobuf/compiler/plugin_pb")

getStdin.buffer().then(inputBuff => {
    try {
        var typedInputBuff = new Uint8Array(inputBuff.length)
        // XXX: WHY DOES new Uint8Array(buff.buffer, 0, buff.length) NOT WORK!?!?! IS IT BECAUSE OF NODE4???
        for (var i = 0; i < typedInputBuff.length; i++) {
            typedInputBuff[i] = inputBuff[i]
        }
        var codeGenRequest = proto.google.protobuf.compiler.CodeGeneratorRequest.deserializeBinary(typedInputBuff)

        var codeGenResponse = new proto.google.protobuf.compiler.CodeGeneratorResponse()
        var protoFilesArray = codeGenRequest.getProtoFileList()
        var fileNamesArray = codeGenRequest.getFileToGenerateList()

        for (var i = 0; i < protoFilesArray.length; i++) {
            var thisFile = new proto.google.protobuf.compiler.CodeGeneratorResponse.File()
            thisFile.setName(fileNamesArray[i] + ".tsd")
            thisFile.setContent(generator.processFileDescriptor(fileNamesArray[i], protoFilesArray[i]))
            codeGenResponse.addFile(thisFile)
        }

        var typedOutputBuff = codeGenResponse.serializeBinary()
        var outputBuff = new Buffer(typedOutputBuff.length)
        for (var i = 0; i < typedOutputBuff.length; i++) {
            outputBuff[i] = typedOutputBuff[i]
        }
        process.stdout.write(outputBuff)
    } catch (err) {
        process.stderr.write("protoc-gen-tc Error: " + err.stack + "\n")
        process.exit(1)
    }
});

